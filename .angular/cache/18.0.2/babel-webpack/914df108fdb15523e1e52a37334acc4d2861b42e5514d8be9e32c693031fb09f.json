{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearStoryUIDs = exports.getNextStoryUID = void 0;\n/**\n * Count of stories for each storyId.\n */\nconst storyCounts = new Map();\n/**\n * Increments the count for a storyId and returns the next UID.\n *\n * When a story is bootstrapped, the storyId is used as the element tag. That\n * becomes an issue when a story is rendered multiple times in the same docs\n * page. This function returns a UID that is appended to the storyId to make\n * it unique.\n *\n * @param storyId id of a story\n * @returns uid of a story\n */\nconst getNextStoryUID = storyId => {\n  if (!storyCounts.has(storyId)) {\n    storyCounts.set(storyId, -1);\n  }\n  const count = storyCounts.get(storyId) + 1;\n  storyCounts.set(storyId, count);\n  return `${storyId}-${count}`;\n};\nexports.getNextStoryUID = getNextStoryUID;\n/**\n * Clears the storyId counts.\n *\n * Can be useful for testing, where you need predictable increments, without\n * reloading the global state.\n *\n * If onlyStoryId is provided, only that storyId is cleared.\n *\n * @param onlyStoryId id of a story\n */\nconst clearStoryUIDs = onlyStoryId => {\n  if (onlyStoryId !== undefined && onlyStoryId !== null) {\n    storyCounts.delete(onlyStoryId);\n  } else {\n    storyCounts.clear();\n  }\n};\nexports.clearStoryUIDs = clearStoryUIDs;","map":{"version":3,"names":["Object","defineProperty","exports","value","clearStoryUIDs","getNextStoryUID","storyCounts","Map","storyId","has","set","count","get","onlyStoryId","undefined","delete","clear"],"sources":["/Users/stefanoramirez/Documents/angularSignatureGenerator/node_modules/@storybook/angular/dist/client/angular-beta/utils/StoryUID.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearStoryUIDs = exports.getNextStoryUID = void 0;\n/**\n * Count of stories for each storyId.\n */\nconst storyCounts = new Map();\n/**\n * Increments the count for a storyId and returns the next UID.\n *\n * When a story is bootstrapped, the storyId is used as the element tag. That\n * becomes an issue when a story is rendered multiple times in the same docs\n * page. This function returns a UID that is appended to the storyId to make\n * it unique.\n *\n * @param storyId id of a story\n * @returns uid of a story\n */\nconst getNextStoryUID = (storyId) => {\n    if (!storyCounts.has(storyId)) {\n        storyCounts.set(storyId, -1);\n    }\n    const count = storyCounts.get(storyId) + 1;\n    storyCounts.set(storyId, count);\n    return `${storyId}-${count}`;\n};\nexports.getNextStoryUID = getNextStoryUID;\n/**\n * Clears the storyId counts.\n *\n * Can be useful for testing, where you need predictable increments, without\n * reloading the global state.\n *\n * If onlyStoryId is provided, only that storyId is cleared.\n *\n * @param onlyStoryId id of a story\n */\nconst clearStoryUIDs = (onlyStoryId) => {\n    if (onlyStoryId !== undefined && onlyStoryId !== null) {\n        storyCounts.delete(onlyStoryId);\n    }\n    else {\n        storyCounts.clear();\n    }\n};\nexports.clearStoryUIDs = clearStoryUIDs;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAGF,OAAO,CAACG,eAAe,GAAG,KAAK,CAAC;AACzD;AACA;AACA;AACA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,eAAe,GAAIG,OAAO,IAAK;EACjC,IAAI,CAACF,WAAW,CAACG,GAAG,CAACD,OAAO,CAAC,EAAE;IAC3BF,WAAW,CAACI,GAAG,CAACF,OAAO,EAAE,CAAC,CAAC,CAAC;EAChC;EACA,MAAMG,KAAK,GAAGL,WAAW,CAACM,GAAG,CAACJ,OAAO,CAAC,GAAG,CAAC;EAC1CF,WAAW,CAACI,GAAG,CAACF,OAAO,EAAEG,KAAK,CAAC;EAC/B,OAAQ,GAAEH,OAAQ,IAAGG,KAAM,EAAC;AAChC,CAAC;AACDT,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,cAAc,GAAIS,WAAW,IAAK;EACpC,IAAIA,WAAW,KAAKC,SAAS,IAAID,WAAW,KAAK,IAAI,EAAE;IACnDP,WAAW,CAACS,MAAM,CAACF,WAAW,CAAC;EACnC,CAAC,MACI;IACDP,WAAW,CAACU,KAAK,CAAC,CAAC;EACvB;AACJ,CAAC;AACDd,OAAO,CAACE,cAAc,GAAGA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}