{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/stefanoramirez/Documents/angularSignatureGenerator/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractRenderer = exports.STORY_UID_ATTRIBUTE = void 0;\nconst core_1 = require(\"@angular/core\");\nconst platform_browser_1 = require(\"@angular/platform-browser\");\nconst rxjs_1 = require(\"rxjs\");\nconst telejson_1 = require(\"telejson\");\nconst StorybookModule_1 = require(\"./StorybookModule\");\nconst StorybookProvider_1 = require(\"./StorybookProvider\");\nconst PropertyExtractor_1 = require(\"./utils/PropertyExtractor\");\nconst BootstrapQueue_1 = require(\"./utils/BootstrapQueue\");\nconst applicationRefs = new Map();\n/**\n * Attribute name for the story UID that may be written to the targetDOMNode.\n *\n * If a target DOM node has a story UID attribute, it will be used as part of\n * the selector for the Angular component.\n */\nexports.STORY_UID_ATTRIBUTE = 'data-sb-story-uid';\nclass AbstractRenderer {\n  /**\n   * Wait and destroy the platform\n   */\n  static resetApplications(domNode) {\n    applicationRefs.forEach((appRef, appDOMNode) => {\n      if (!appRef.destroyed && (!domNode || appDOMNode === domNode)) {\n        appRef.destroy();\n      }\n    });\n  }\n  constructor() {\n    this.previousStoryRenderInfo = new Map();\n    if (typeof NODE_ENV === 'string' && NODE_ENV !== 'development') {\n      try {\n        // platform should be set after enableProdMode()\n        (0, core_1.enableProdMode)();\n      } catch (e) {\n        console.debug(e);\n      }\n    }\n  }\n  /**\n   * Bootstrap main angular module with main component or send only new `props` with storyProps$\n   *\n   * @param storyFnAngular {StoryFnAngularReturnType}\n   * @param forced {boolean} If :\n   * - true render will only use the StoryFn `props' in storyProps observable that will update sotry's component/template properties. Improves performance without reloading the whole module&component if props changes\n   * - false fully recharges or initializes angular module & component\n   * @param component {Component}\n   */\n  render({\n    storyFnAngular,\n    forced,\n    component,\n    targetDOMNode\n  }) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const targetSelector = _this.generateTargetSelectorFromStoryId(targetDOMNode.id);\n      const newStoryProps$ = new rxjs_1.BehaviorSubject(storyFnAngular.props);\n      if (!_this.fullRendererRequired({\n        targetDOMNode,\n        storyFnAngular,\n        moduleMetadata: {\n          ...storyFnAngular.moduleMetadata\n        },\n        forced\n      })) {\n        _this.storyProps$.next(storyFnAngular.props);\n        return;\n      }\n      yield _this.beforeFullRender(targetDOMNode);\n      // Complete last BehaviorSubject and set a new one for the current module\n      if (_this.storyProps$) {\n        _this.storyProps$.complete();\n      }\n      _this.storyProps$ = newStoryProps$;\n      _this.initAngularRootElement(targetDOMNode, targetSelector);\n      const analyzedMetadata = new PropertyExtractor_1.PropertyExtractor(storyFnAngular.moduleMetadata, component);\n      const storyUid = targetDOMNode.getAttribute(exports.STORY_UID_ATTRIBUTE);\n      const componentSelector = storyUid !== null ? `${targetSelector}[${storyUid}]` : targetSelector;\n      if (storyUid !== null) {\n        const element = targetDOMNode.querySelector(targetSelector);\n        element.toggleAttribute(storyUid, true);\n      }\n      const application = (0, StorybookModule_1.getApplication)({\n        storyFnAngular,\n        component,\n        targetSelector: componentSelector,\n        analyzedMetadata\n      });\n      const applicationRef = yield (0, BootstrapQueue_1.queueBootstrapping)(() => {\n        return (0, platform_browser_1.bootstrapApplication)(application, {\n          ...storyFnAngular.applicationConfig,\n          providers: [(0, StorybookProvider_1.storyPropsProvider)(newStoryProps$), ...analyzedMetadata.applicationProviders, ...(storyFnAngular.applicationConfig?.providers ?? [])]\n        });\n      });\n      applicationRefs.set(targetDOMNode, applicationRef);\n    })();\n  }\n  /**\n   * Only ASCII alphanumerics can be used as HTML tag name.\n   * https://html.spec.whatwg.org/#elements-2\n   *\n   * Therefore, stories break when non-ASCII alphanumerics are included in target selector.\n   * https://github.com/storybookjs/storybook/issues/15147\n   *\n   * This method returns storyId when it doesn't contain any non-ASCII alphanumerics.\n   * Otherwise, it generates a valid HTML tag name from storyId by removing non-ASCII alphanumerics from storyId, prefixing \"sb-\", and suffixing \"-component\"\n   * @protected\n   * @memberof AbstractRenderer\n   */\n  generateTargetSelectorFromStoryId(id) {\n    const invalidHtmlTag = /[^A-Za-z0-9-]/g;\n    const storyIdIsInvalidHtmlTagName = invalidHtmlTag.test(id);\n    return storyIdIsInvalidHtmlTagName ? `sb-${id.replace(invalidHtmlTag, '')}-component` : id;\n  }\n  /**\n   * Adds DOM element that angular will use as bootstrap component.\n   */\n  initAngularRootElement(targetDOMNode, targetSelector) {\n    targetDOMNode.innerHTML = '';\n    targetDOMNode.appendChild(document.createElement(targetSelector));\n  }\n  fullRendererRequired({\n    targetDOMNode,\n    storyFnAngular,\n    moduleMetadata,\n    forced\n  }) {\n    const previousStoryRenderInfo = this.previousStoryRenderInfo.get(targetDOMNode);\n    const currentStoryRender = {\n      storyFnAngular,\n      moduleMetadataSnapshot: (0, telejson_1.stringify)(moduleMetadata, {\n        allowFunction: false\n      })\n    };\n    this.previousStoryRenderInfo.set(targetDOMNode, currentStoryRender);\n    if (\n    // check `forceRender` of story RenderContext\n    !forced ||\n    // if it's the first rendering and storyProps$ is not init\n    !this.storyProps$) {\n      return true;\n    }\n    // force the rendering if the template has changed\n    const hasChangedTemplate = !!storyFnAngular?.template && previousStoryRenderInfo?.storyFnAngular?.template !== storyFnAngular.template;\n    if (hasChangedTemplate) {\n      return true;\n    }\n    // force the rendering if the metadata structure has changed\n    const hasChangedModuleMetadata = currentStoryRender.moduleMetadataSnapshot !== previousStoryRenderInfo?.moduleMetadataSnapshot;\n    return hasChangedModuleMetadata;\n  }\n}\nexports.AbstractRenderer = AbstractRenderer;","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","AbstractRenderer","STORY_UID_ATTRIBUTE","core_1","platform_browser_1","rxjs_1","telejson_1","StorybookModule_1","StorybookProvider_1","PropertyExtractor_1","BootstrapQueue_1","applicationRefs","Map","resetApplications","domNode","forEach","appRef","appDOMNode","destroyed","destroy","constructor","previousStoryRenderInfo","NODE_ENV","enableProdMode","e","console","debug","render","storyFnAngular","forced","component","targetDOMNode","_this","targetSelector","generateTargetSelectorFromStoryId","id","newStoryProps$","BehaviorSubject","props","fullRendererRequired","moduleMetadata","storyProps$","next","beforeFullRender","complete","initAngularRootElement","analyzedMetadata","PropertyExtractor","storyUid","getAttribute","componentSelector","element","querySelector","toggleAttribute","application","getApplication","applicationRef","queueBootstrapping","bootstrapApplication","applicationConfig","providers","storyPropsProvider","applicationProviders","set","invalidHtmlTag","storyIdIsInvalidHtmlTagName","test","replace","innerHTML","appendChild","document","createElement","get","currentStoryRender","moduleMetadataSnapshot","stringify","allowFunction","hasChangedTemplate","template","hasChangedModuleMetadata"],"sources":["/Users/stefanoramirez/Documents/angularSignatureGenerator/node_modules/@storybook/angular/dist/client/angular-beta/AbstractRenderer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractRenderer = exports.STORY_UID_ATTRIBUTE = void 0;\nconst core_1 = require(\"@angular/core\");\nconst platform_browser_1 = require(\"@angular/platform-browser\");\nconst rxjs_1 = require(\"rxjs\");\nconst telejson_1 = require(\"telejson\");\nconst StorybookModule_1 = require(\"./StorybookModule\");\nconst StorybookProvider_1 = require(\"./StorybookProvider\");\nconst PropertyExtractor_1 = require(\"./utils/PropertyExtractor\");\nconst BootstrapQueue_1 = require(\"./utils/BootstrapQueue\");\nconst applicationRefs = new Map();\n/**\n * Attribute name for the story UID that may be written to the targetDOMNode.\n *\n * If a target DOM node has a story UID attribute, it will be used as part of\n * the selector for the Angular component.\n */\nexports.STORY_UID_ATTRIBUTE = 'data-sb-story-uid';\nclass AbstractRenderer {\n    /**\n     * Wait and destroy the platform\n     */\n    static resetApplications(domNode) {\n        applicationRefs.forEach((appRef, appDOMNode) => {\n            if (!appRef.destroyed && (!domNode || appDOMNode === domNode)) {\n                appRef.destroy();\n            }\n        });\n    }\n    constructor() {\n        this.previousStoryRenderInfo = new Map();\n        if (typeof NODE_ENV === 'string' && NODE_ENV !== 'development') {\n            try {\n                // platform should be set after enableProdMode()\n                (0, core_1.enableProdMode)();\n            }\n            catch (e) {\n                console.debug(e);\n            }\n        }\n    }\n    /**\n     * Bootstrap main angular module with main component or send only new `props` with storyProps$\n     *\n     * @param storyFnAngular {StoryFnAngularReturnType}\n     * @param forced {boolean} If :\n     * - true render will only use the StoryFn `props' in storyProps observable that will update sotry's component/template properties. Improves performance without reloading the whole module&component if props changes\n     * - false fully recharges or initializes angular module & component\n     * @param component {Component}\n     */\n    async render({ storyFnAngular, forced, component, targetDOMNode, }) {\n        const targetSelector = this.generateTargetSelectorFromStoryId(targetDOMNode.id);\n        const newStoryProps$ = new rxjs_1.BehaviorSubject(storyFnAngular.props);\n        if (!this.fullRendererRequired({\n            targetDOMNode,\n            storyFnAngular,\n            moduleMetadata: {\n                ...storyFnAngular.moduleMetadata,\n            },\n            forced,\n        })) {\n            this.storyProps$.next(storyFnAngular.props);\n            return;\n        }\n        await this.beforeFullRender(targetDOMNode);\n        // Complete last BehaviorSubject and set a new one for the current module\n        if (this.storyProps$) {\n            this.storyProps$.complete();\n        }\n        this.storyProps$ = newStoryProps$;\n        this.initAngularRootElement(targetDOMNode, targetSelector);\n        const analyzedMetadata = new PropertyExtractor_1.PropertyExtractor(storyFnAngular.moduleMetadata, component);\n        const storyUid = targetDOMNode.getAttribute(exports.STORY_UID_ATTRIBUTE);\n        const componentSelector = storyUid !== null ? `${targetSelector}[${storyUid}]` : targetSelector;\n        if (storyUid !== null) {\n            const element = targetDOMNode.querySelector(targetSelector);\n            element.toggleAttribute(storyUid, true);\n        }\n        const application = (0, StorybookModule_1.getApplication)({\n            storyFnAngular,\n            component,\n            targetSelector: componentSelector,\n            analyzedMetadata,\n        });\n        const applicationRef = await (0, BootstrapQueue_1.queueBootstrapping)(() => {\n            return (0, platform_browser_1.bootstrapApplication)(application, {\n                ...storyFnAngular.applicationConfig,\n                providers: [\n                    (0, StorybookProvider_1.storyPropsProvider)(newStoryProps$),\n                    ...analyzedMetadata.applicationProviders,\n                    ...(storyFnAngular.applicationConfig?.providers ?? []),\n                ],\n            });\n        });\n        applicationRefs.set(targetDOMNode, applicationRef);\n    }\n    /**\n     * Only ASCII alphanumerics can be used as HTML tag name.\n     * https://html.spec.whatwg.org/#elements-2\n     *\n     * Therefore, stories break when non-ASCII alphanumerics are included in target selector.\n     * https://github.com/storybookjs/storybook/issues/15147\n     *\n     * This method returns storyId when it doesn't contain any non-ASCII alphanumerics.\n     * Otherwise, it generates a valid HTML tag name from storyId by removing non-ASCII alphanumerics from storyId, prefixing \"sb-\", and suffixing \"-component\"\n     * @protected\n     * @memberof AbstractRenderer\n     */\n    generateTargetSelectorFromStoryId(id) {\n        const invalidHtmlTag = /[^A-Za-z0-9-]/g;\n        const storyIdIsInvalidHtmlTagName = invalidHtmlTag.test(id);\n        return storyIdIsInvalidHtmlTagName ? `sb-${id.replace(invalidHtmlTag, '')}-component` : id;\n    }\n    /**\n     * Adds DOM element that angular will use as bootstrap component.\n     */\n    initAngularRootElement(targetDOMNode, targetSelector) {\n        targetDOMNode.innerHTML = '';\n        targetDOMNode.appendChild(document.createElement(targetSelector));\n    }\n    fullRendererRequired({ targetDOMNode, storyFnAngular, moduleMetadata, forced, }) {\n        const previousStoryRenderInfo = this.previousStoryRenderInfo.get(targetDOMNode);\n        const currentStoryRender = {\n            storyFnAngular,\n            moduleMetadataSnapshot: (0, telejson_1.stringify)(moduleMetadata, { allowFunction: false }),\n        };\n        this.previousStoryRenderInfo.set(targetDOMNode, currentStoryRender);\n        if (\n        // check `forceRender` of story RenderContext\n        !forced ||\n            // if it's the first rendering and storyProps$ is not init\n            !this.storyProps$) {\n            return true;\n        }\n        // force the rendering if the template has changed\n        const hasChangedTemplate = !!storyFnAngular?.template &&\n            previousStoryRenderInfo?.storyFnAngular?.template !== storyFnAngular.template;\n        if (hasChangedTemplate) {\n            return true;\n        }\n        // force the rendering if the metadata structure has changed\n        const hasChangedModuleMetadata = currentStoryRender.moduleMetadataSnapshot !== previousStoryRenderInfo?.moduleMetadataSnapshot;\n        return hasChangedModuleMetadata;\n    }\n}\nexports.AbstractRenderer = AbstractRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}